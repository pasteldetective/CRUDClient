{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vicki\\\\Desktop\\\\FINAL-PROJECT\\\\CRUDClient\\\\src\\\\components\\\\containers\\\\EditCampusContainer.js\";\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchAllStudentsThunk, fetchStudentThunk } from \"../../store/thunks\";\nimport { fetchAllCampusesThunk, fetchCampusThunk } from \"../../store/thunks\";\nimport { editCampusThunk } from \"../../store/thunks\";\nimport { EditCampusView } from \"../views/EditCampusView.js\";\nimport { Redirect } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass EditCampusContainer extends Component {\n  // Get campus data from database\n  componentDidMount() {\n    //getting campus ID from url\n    this.props.fetchCampus(this.props.match.params.id);\n    this.props.fetchAllStudents();\n    console.log(\"checking -->\"); //testing purposes\n    console.log(this.props.campus.students); //testing purposes\n  }\n  constructor(props) {\n    super(props);\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n    // Take action after user click the submit button\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      // let addedStudent = this.props.fetchStudent(this.state.studentId);\n      // this.state.studentsArray.push(addedStudent);\n      let campus = this.state.campus;\n      campus.name = this.state.name;\n      campus.address = this.state.address;\n      campus.imageUrl = this.state.imageUrl;\n      campus.description = this.state.description;\n      await this.props.editCampus(campus);\n\n      // Update state, and trigger redirect to show the edited campus.\n      this.setState({\n        name: '',\n        address: '',\n        imageUrl: '',\n        description: '',\n        redirect: true\n      });\n    };\n    let _campus = this.props.campus;\n    this.state = {\n      campus: _campus,\n      name: _campus.name,\n      address: _campus.address,\n      imageUrl: _campus.imageUrl,\n      description: _campus.description,\n      campusId: _campus.id,\n      //id of campus we are editing\n      redirect: false\n    };\n  }\n  // Render Campus view by passing campus data as props to the corresponding View component\n  render() {\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campus/${this.props.match.params.id}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(EditCampusView, {\n        campus: this.props.campus,\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        allStudents: this.props.allStudents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this);\n  }\n}\nconst mapState = state => {\n  return {\n    campus: state.campus,\n    allStudents: state.allStudents\n  };\n};\n\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    editCampus: campus => dispatch(editCampusThunk(campus)),\n    fetchAllStudents: () => dispatch(fetchAllStudentsThunk())\n  };\n};\n\n// Export store-connected container by default\n// EditCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(EditCampusContainer);","map":{"version":3,"names":["Header","React","Component","connect","fetchAllStudentsThunk","fetchStudentThunk","fetchAllCampusesThunk","fetchCampusThunk","editCampusThunk","EditCampusView","Redirect","jsxDEV","_jsxDEV","EditCampusContainer","componentDidMount","props","fetchCampus","match","params","id","fetchAllStudents","console","log","campus","students","constructor","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","state","address","imageUrl","description","editCampus","redirect","campusId","render","to","fileName","_jsxFileName","lineNumber","columnNumber","children","allStudents","mapState","mapDispatch","dispatch"],"sources":["C:/Users/Vicki/Desktop/FINAL-PROJECT/CRUDClient/src/components/containers/EditCampusContainer.js"],"sourcesContent":["import Header from './Header';\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchAllStudentsThunk, fetchStudentThunk } from \"../../store/thunks\";\r\nimport { fetchAllCampusesThunk, fetchCampusThunk } from \"../../store/thunks\";\r\nimport { editCampusThunk } from \"../../store/thunks\";\r\nimport { EditCampusView } from \"../views/EditCampusView.js\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass EditCampusContainer extends Component {\r\n    // Get campus data from database\r\n    componentDidMount() {\r\n      //getting campus ID from url\r\n      this.props.fetchCampus(this.props.match.params.id);\r\n      this.props.fetchAllStudents();\r\n      console.log(\"checking -->\"); //testing purposes\r\n      console.log(this.props.campus.students); //testing purposes\r\n    }\r\n  \r\n    constructor(props){\r\n      super(props);\r\n      let campus = this.props.campus\r\n      this.state = {\r\n        campus: campus,\r\n        name: campus.name,\r\n        address: campus.address,\r\n        imageUrl: campus.imageUrl,\r\n        description: campus.description,\r\n        campusId: campus.id, //id of campus we are editing\r\n        redirect: false\r\n    };\r\n    }\r\n  \r\n    handleChange = event => {\r\n      this.setState({\r\n        [event.target.name]: event.target.value\r\n      });\r\n    }\r\n  \r\n    // Take action after user click the submit button\r\n    handleSubmit = async event => {\r\n      event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n    \r\n        // let addedStudent = this.props.fetchStudent(this.state.studentId);\r\n        // this.state.studentsArray.push(addedStudent);\r\n        let campus = this.state.campus\r\n        campus.name = this.state.name\r\n        campus.address = this.state.address\r\n        campus.imageUrl = this.state.imageUrl\r\n        campus.description = this.state.description\r\n        \r\n        await this.props.editCampus(campus);\r\n  \r\n        // Update state, and trigger redirect to show the edited campus.\r\n        this.setState({\r\n          name: '',\r\n          address: '',\r\n          imageUrl: '',\r\n          description: '',\r\n          redirect: true\r\n        });\r\n      \r\n    }\r\n  \r\n    // Render Campus view by passing campus data as props to the corresponding View component\r\n    render() {\r\n      if(this.state.redirect) {\r\n        return (<Redirect to={`/campus/${this.props.match.params.id}`}/>)\r\n      }\r\n      return (\r\n        <div>\r\n          <Header />\r\n          <EditCampusView campus={this.props.campus}\r\n          handleChange = {this.handleChange} \r\n          handleSubmit={this.handleSubmit}\r\n          allStudents={this.props.allStudents}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  const mapState = (state) => {\r\n    return {\r\n      campus: state.campus,\r\n      allStudents: state.allStudents\r\n    };\r\n  };\r\n  \r\n  // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n  // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\n  const mapDispatch = (dispatch) => {\r\n    return {\r\n      fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\r\n      editCampus: (campus) => dispatch(editCampusThunk(campus)),\r\n      fetchAllStudents: () => dispatch(fetchAllStudentsThunk())\r\n    };\r\n  };\r\n  \r\n  \r\n  // Export store-connected container by default\r\n  // EditCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n  // (and re-read the values when the Store State updates).\r\n  export default connect(mapState, mapDispatch)(EditCampusContainer);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}