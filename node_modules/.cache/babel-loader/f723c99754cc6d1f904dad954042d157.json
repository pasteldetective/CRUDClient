{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vicki\\\\Desktop\\\\FINAL-PROJECT\\\\CRUDClient\\\\src\\\\components\\\\containers\\\\EditStudentContainer.js\";\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchStudentThunk } from \"../../store/thunks\";\nimport { editStudentThunk } from \"../../store/thunks\";\nimport { fetchAllCampusesThunk } from \"../../store/thunks\";\nimport EditStudentView from \"../views/EditStudentView\";\nimport { Redirect } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass EditStudentContainer extends Component {\n  // Get student data from back-end database\n  componentDidMount() {\n    this.props.fetchStudent(this.props.match.params.id);\n    this.props.fetchAllCampuses();\n  }\n  constructor(props) {\n    super(props);\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n    // Take action after user click the submit button\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      if (!this.props.allCampuses.map(({\n        id\n      }) => id).includes(parseInt(this.state.campusId))) {\n        alert(\"CampusId is not valid, please enter a valid campusId.\");\n        this.setState({\n          redirect: false\n        });\n      } else {\n        let student = this.state.student;\n        student.firstname = this.state.firstname;\n        student.lastname = this.state.lastname;\n        student.campusId = this.state.campusId;\n        student.imageURL = this.state.imageURL;\n        student.gpa = this.state.gpa;\n        student.email = this.state.email;\n        await this.props.editStudent(student);\n\n        // Update state, and trigger redirect to show the new student.\n        this.setState({\n          firstname: '',\n          lastname: '',\n          campusId: '',\n          email: '',\n          imageURL: '',\n          gpa: '',\n          redirect: true\n        });\n      }\n    };\n    let _student = this.props.student;\n    this.state = {\n      student: _student,\n      firstname: _student.firstname,\n      lastname: _student.lastname,\n      campusId: _student.campusId,\n      imageURL: _student.imageURL,\n      gpa: _student.gpa,\n      email: _student.email,\n      studentId: _student.id,\n      redirect: false\n    };\n  }\n  render() {\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.props.match.params.id}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 15\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditStudentView, {\n        student: this.props.student,\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        allCampuses: this.props.allCampuses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  }\n}\nconst mapState = state => {\n  return {\n    student: state.student,\n    allCampuses: state.allCampuses // Get the State object from Reducer \"allCampuses\"\n  };\n};\n\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    fetchStudent: id => dispatch(fetchStudentThunk(id)),\n    editStudent: student => dispatch(editStudentThunk(student)),\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk())\n  };\n};\n\n// Export store-connected container by default\n// StudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(EditStudentContainer);","map":{"version":3,"names":["Header","React","Component","connect","fetchStudentThunk","editStudentThunk","fetchAllCampusesThunk","EditStudentView","Redirect","jsxDEV","_jsxDEV","EditStudentContainer","componentDidMount","props","fetchStudent","match","params","id","fetchAllCampuses","constructor","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","allCampuses","map","includes","parseInt","state","campusId","alert","redirect","student","firstname","lastname","imageURL","gpa","email","editStudent","studentId","render","to","fileName","_jsxFileName","lineNumber","columnNumber","children","mapState","mapDispatch","dispatch"],"sources":["C:/Users/Vicki/Desktop/FINAL-PROJECT/CRUDClient/src/components/containers/EditStudentContainer.js"],"sourcesContent":["import Header from './Header';\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchStudentThunk } from \"../../store/thunks\";\r\nimport { editStudentThunk } from \"../../store/thunks\";\r\nimport { fetchAllCampusesThunk } from \"../../store/thunks\";\r\nimport EditStudentView from \"../views/EditStudentView\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass EditStudentContainer extends Component {\r\n  // Get student data from back-end database\r\n  componentDidMount() {\r\n    this.props.fetchStudent(this.props.match.params.id);\r\n    this.props.fetchAllCampuses();\r\n  }\r\n\r\n  constructor(props){\r\n    super(props);\r\n    \r\n    let student = this.props.student\r\n\r\n    this.state = {\r\n      student: student,\r\n      firstname: student.firstname,\r\n      lastname: student.lastname,\r\n      campusId: student.campusId,\r\n      imageURL: student.imageURL,\r\n      gpa: student.gpa,\r\n      email: student.email,\r\n      studentId: student.id, \r\n      redirect: false\r\n    };\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  // Take action after user click the submit button\r\n  handleSubmit = async event => {\r\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n    \r\n    if(!(this.props.allCampuses.map(({id}) => id)).includes(parseInt(this.state.campusId))){\r\n      alert(\"CampusId is not valid, please enter a valid campusId.\")\r\n      this.setState({\r\n        redirect: false\r\n      })\r\n    }\r\n    else{\r\n      let student = this.state.student\r\n      student.firstname = this.state.firstname\r\n      student.lastname = this.state.lastname\r\n      student.campusId = this.state.campusId\r\n      student.imageURL = this.state.imageURL\r\n      student.gpa = this.state.gpa\r\n      student.email = this.state.email\r\n \r\n      await this.props.editStudent(student);\r\n\r\n      // Update state, and trigger redirect to show the new student.\r\n      this.setState({\r\n        firstname: '', \r\n        lastname: '', \r\n        campusId: '', \r\n        email: '',\r\n        imageURL: '',\r\n        gpa: '',\r\n        redirect: true\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if(this.state.redirect) {\r\n      return (<Redirect to={`/student/${this.props.match.params.id}`}/>)\r\n    }\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <EditStudentView student={this.props.student} \r\n        handleChange = {this.handleChange} \r\n        handleSubmit={this.handleSubmit}\r\n        allCampuses={this.props.allCampuses}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapState = (state) => {\r\n  return {\r\n    student: state.student,\r\n    allCampuses: state.allCampuses,  // Get the State object from Reducer \"allCampuses\"\r\n  };\r\n};\r\n\r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\r\n    editStudent: (student) => dispatch(editStudentThunk(student)),\r\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\r\n  };\r\n};\r\n\r\n\r\n// Export store-connected container by default\r\n// StudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(EditStudentContainer);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}